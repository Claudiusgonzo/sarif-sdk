{
  /* SchemaUri writes as "$schema" in file */
  "\"schemaUri\"": "\"$schema\"",

  /* PropertyBag shouldn't inherit from itself */ 
  "PropertyBag\\ :\\ PropertyBagHolder,\\ ": "PropertyBag : ",

  /* Base class defines Properties, so entities must declare as 'internal override' */
  "public virtual IDictionary<String, SerializedPropertyInfo> Properties": "internal override IDictionary<String, SerializedPropertyInfo> Properties",

  /* Use custom reader for SarifVersion enum */
  "JsonToEnum<SarifVersion>.Read\\(reader, root\\)": "Readers.JsonToSarifVersion.Read(reader, root)",

  /* Auto-Set Result.Run on Results */
  "_table.Database.Result.List\\(_table.Results\\[_index\\]\\)": "new ResultList(this, _table.Database.Result, _table.Results[_index])",

  /* FlagsEnum representation is non-standard */
  "JsonToEnum<(ArtifactRoles)>.Read": "Readers.FlagsEnumConverter.Instance.Read<$1>",
  "JsonToEnum<(ArtifactRoles)>.Write": "Readers.FlagsEnumConverter.Instance.Write<$1>",
  "JsonToEnum<(ToolComponentContents)>.Read": "Readers.FlagsEnumConverter.Instance.Read<$1>",
  "JsonToEnum<(ToolComponentContents)>.Write": "Readers.FlagsEnumConverter.Instance.Write<$1>",

  /* Result.Kind and Level have inter-related logic */
  "(public virtual ResultKind Kind.*?)(set => [^\\r\\n]+)": "$1set { _table.Kind[_index] = (int)value; if (value != ResultKind.Fail) { Level = FailureLevel.None; } }",
  "(public virtual ResultKind Kind.*?public virtual FailureLevel Level.*?)(set => [^\\r\\n]+)": "$1set { _table.Level[_index] = (int)value; if (value != FailureLevel.None) { Kind = ResultKind.Fail; } }"
}